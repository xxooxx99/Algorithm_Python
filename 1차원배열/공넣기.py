"""
# BAEKJOON 10810
# psudo code
1차원 배열, - 각 바구니 1차원 배열로 선언, 바구니에는 1부터 N번까지 번호가 매겨져있다.
1번부터 N번까지 번호가 적혀있는 공 - 1차원 배열
처음 바구니에는 공이 들어 있지 않다. 바구니에는 공을 1개만 넣을수 있다.
M번 시행횟수동안 공을 넣음-공을 넣을때 1부터 N번 바구니에서  같은 번호의 공을 넣을 범위를 정함, 바구니에 이미 공이 들어가있다면, 공을 빼고 새로 공을 넣는다. 바구니는 연속되어야한다.
RESTRICTION : (1<=N<= 100) (1<=M<=100)
예제입력
5 4 -> N =5, M =4, 바구니의 갯수는 5, 공 시행횟수는 4
1 2 3 -> 1번바구니 부터 2번 바구니에 3번공을 넣음
================================================================
1 2 3 4 5
3 3 0 0 0
================================================================
3 4 4 -> 3번바구니부터 4번 바구니에 4번공을 넣음
================================================================
1 2 3 4 5
3 3 4 4 0
================================================================
1 4 1 -> 1번바구니부터 4번바구니에 1번공을 넣음
================================================================
1 2 3 4 5
1 1 1 1 0
================================================================
2 2 2 -> 2번 바구니부터 2번바구니까지, 즉 2번바구니에 2번공을 넣음
================================================================
1 2 3 4 5
1 2 1 1 0
================================================================

출력 결과 : 1 2 1 1 0

================================================================

코드 구조 짜기
=>

제한조건문 def RESTRICTION() :

바구니에 1차원 배열 선언, 초기화
입력값 map,split으로 N에 해당하는 갯수만큼 바구니 초기화
M만큼 반복, 
마지막 출력
"""

def RESTRICTION(N, M):
    if (1 <= N <= 100) and (1 <= M <= 100):
        return False
    return True

def main():
    # N과 M 입력받기
    N, M = map(int, input().split())

    # N, M 제한 조건 확인
    if RESTRICTION(N, M):
        raise ValueError("Restriction Error")

    # N개의 바구니 초기화
    baskets = [0] * N

    # M만큼 추가 입력 받기
    for _ in range(M):
        A, B, C = map(int, input().split())
        for i in range(A - 1, B):
            baskets[i] = C

    # 결과 출력
    print(" ".join(map(str, baskets)))

if __name__ == "__main__":
    main()
